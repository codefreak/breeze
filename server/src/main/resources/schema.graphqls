scalar DateTime

interface FileSystemNode {
    path: String!
    modified: DateTime!
}

type Directory implements FileSystemNode {
    path: String!
    modified: DateTime!
}

type File implements FileSystemNode  {
    path: String!
    modified: DateTime!
    size: Int!
    contents: String!
}

enum FileSystemEventType {
    CREATED, DELETED, MODIFIED
}

type FilesystemEvent {
    path: String!
    type: FileSystemEventType!
}

type Config {
    instanceId: String!
}

type Query {
    files: [FileSystemNode!]!
    file(path: String!): FileSystemNode
    config: Config!
}

enum REPLType {
    DEFAULT, RUN
}

type Mutation {
    writeFile(path: String!, contents: String!): File!
    createFile(path: String!): File!
    createDirectory(path: String!): Directory!
    #unlink(path: String!): Boolean!
    #move(source: String!, target: String!): FileSystemNode!
    #copy(soruce: String!, target: String!): FileSystemNode!

    createRepl(type: REPLType): ID!
    killRepl(id: ID!): Int
    writeRepl(id: ID!, data: String!): Int
    resizeRepl(id: ID!, cols: Int!, rows: Int!): Boolean
}

type Subscription {
    fileChange: FilesystemEvent!
    replOutput(id: ID!): String!
    replWait(id: ID!): Int!
}